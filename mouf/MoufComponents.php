<?php
/**
 * This is a file automatically generated by the Mouf framework. Do not modify it, as it could be overwritten.
 */
use Mouf\MoufManager;
use Interop\Container\ContainerInterface;
MoufManager::initMoufManager();
$moufManager = MoufManager::getMoufManager();

$moufManager->getConfigManager()->setConstantsDefinitionArray(array (
  'DEBUG' => 
  array (
    'defaultValue' => true,
    'type' => 'bool',
    'comment' => 'Set to true to enable debug/development mode.',
  ),
  'SECRET' => 
  array (
    'defaultValue' => 'G22gT2M9pbuork8CHNcV',
    'type' => 'string',
    'comment' => 'A random string. It should be different for any application deployed.',
  ),
));

$moufManager->setAllVariables(array (
  'splashDefaultControllersNamespace' => 'DemoCoder\\Controllers\\',
  'splashDefaultViewsDirectory' => 'views/',
));

$moufManager->addComponentInstances(array (
  'Mouf\\Mvc\\Splash\\Controllers\\HttpErrorsController' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Controllers\\HttpErrorsController',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'bootstrapTemplate',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'block.content',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => 'DEBUG',
        'parametertype' => 'primitive',
        'type' => 'config',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'Mouf\\Mvc\\Splash\\Routers\\ExceptionRouter' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Routers\\ExceptionRouter',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'Mouf\\Mvc\\Splash\\Controllers\\HttpErrorsController',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'psr.errorLogLogger',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'Mouf\\Mvc\\Splash\\Routers\\NotFoundRouter' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Routers\\NotFoundRouter',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'Mouf\\Mvc\\Splash\\Controllers\\HttpErrorsController',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'psr.errorLogLogger',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'Mouf\\Mvc\\Splash\\Routers\\PhpVarsCheckRouter' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Routers\\PhpVarsCheckRouter',
    'external' => false,
    'weak' => false,
  ),
  'Mouf\\Mvc\\Splash\\Routers\\SplashDefaultRouter' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Routers\\SplashDefaultRouter',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'return $container;',
        'parametertype' => 'primitive',
        'type' => 'php',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 
        array (
          0 => 'Mouf\\Mvc\\Splash\\Services\\MoufExplorerUrlProvider',
        ),
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => 'Mouf\\Mvc\\Splash\\Services\\ParameterFetcherRegistry',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      3 => 
      array (
        'value' => 'splashCachePool',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      4 => 
      array (
        'value' => 'psr.errorLogLogger',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      5 => 
      array (
        'value' => 'strict',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      6 => 
      array (
        'value' => 'DEBUG',
        'parametertype' => 'primitive',
        'type' => 'config',
        'metadata' => 
        array (
        ),
      ),
      7 => 
      array (
        'value' => 'return ROOT_URL;',
        'parametertype' => 'primitive',
        'type' => 'php',
        'metadata' => 
        array (
        ),
      ),
    ),
    'setterBinds' => 
    array (
      'setHttp400Handler' => 'Mouf\\Mvc\\Splash\\Controllers\\HttpErrorsController',
    ),
  ),
  'Mouf\\Mvc\\Splash\\Services\\ControllerAnalyzer' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Services\\ControllerAnalyzer',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'return $container;',
        'parametertype' => 'primitive',
        'type' => 'php',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'Mouf\\Mvc\\Splash\\Services\\ParameterFetcherRegistry',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => 'annotationReader',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'Mouf\\Mvc\\Splash\\Services\\ControllerRegistry' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Services\\ControllerRegistry',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'Mouf\\Mvc\\Splash\\Services\\ControllerAnalyzer',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 
        array (
        ),
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => 'Mouf\\Mvc\\Splash\\Services\\MoufControllerExplorer',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'Mouf\\Mvc\\Splash\\Services\\MoufControllerExplorer' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Services\\MoufControllerExplorer',
    'external' => false,
    'weak' => false,
  ),
  'Mouf\\Mvc\\Splash\\Services\\MoufExplorerUrlProvider' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Services\\MoufExplorerUrlProvider',
    'external' => false,
    'weak' => false,
  ),
  'Mouf\\Mvc\\Splash\\Services\\ParameterFetcherRegistry' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Services\\ParameterFetcherRegistry',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 
        array (
          0 => 'Mouf\\Mvc\\Splash\\Services\\SplashRequestFetcher',
          1 => 'Mouf\\Mvc\\Splash\\Services\\SplashRequestParameterFetcher',
        ),
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'Mouf\\Mvc\\Splash\\Services\\SplashRequestFetcher' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Services\\SplashRequestFetcher',
    'external' => false,
    'weak' => false,
  ),
  'Mouf\\Mvc\\Splash\\Services\\SplashRequestParameterFetcher' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Services\\SplashRequestParameterFetcher',
    'external' => false,
    'weak' => false,
  ),
  'Mouf\\Mvc\\Splash\\SplashMiddleware' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\SplashMiddleware',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 
        array (
          0 => '__anonymous__b33b_15033',
          1 => '__anonymous__b33b_3838',
          2 => '__anonymous__b33b_30303',
          3 => '__anonymous__b33b_2220',
          4 => '__anonymous__b33b_18805',
          5 => '__anonymous__b33b_920',
        ),
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'Psr7Middlewares\\Middleware\\Payload' => 
  array (
    'class' => 'Psr7Middlewares\\Middleware\\Payload',
    'external' => false,
    'weak' => false,
  ),
  '__anonymous__b33b_15033' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Routers\\Router',
    'external' => false,
    'anonymous' => true,
    'weak' => true,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'Mouf\\Mvc\\Splash\\Routers\\PhpVarsCheckRouter',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  '__anonymous__b33b_18805' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Routers\\ErrorRouter',
    'external' => false,
    'anonymous' => true,
    'weak' => true,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'return $container->get(\'whoopsMiddleware\');',
        'parametertype' => 'primitive',
        'type' => 'php',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => NULL,
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => '__anonymous__b33b_7434',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  '__anonymous__b33b_2220' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Routers\\Router',
    'external' => false,
    'anonymous' => true,
    'weak' => true,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'Mouf\\Mvc\\Splash\\Routers\\NotFoundRouter',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  '__anonymous__b33b_30303' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Routers\\Router',
    'external' => false,
    'anonymous' => true,
    'weak' => true,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'Mouf\\Mvc\\Splash\\Routers\\SplashDefaultRouter',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  '__anonymous__b33b_3838' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Routers\\Router',
    'external' => false,
    'anonymous' => true,
    'weak' => true,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'return $container->get(\'Psr7Middlewares\\\\Middleware\\\\Payload\');',
        'parametertype' => 'primitive',
        'type' => 'php',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  '__anonymous__b33b_6523' => 
  array (
    'class' => 'Mouf\\Utils\\Value\\Variable',
    'external' => false,
    'anonymous' => true,
    'weak' => true,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'DEBUG',
        'parametertype' => 'primitive',
        'type' => 'config',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  '__anonymous__b33b_7434' => 
  array (
    'class' => 'Mouf\\Utils\\Common\\Condition\\ToCondition',
    'external' => false,
    'anonymous' => true,
    'weak' => true,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => '__anonymous__b33b_6523',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  '__anonymous__b33b_920' => 
  array (
    'class' => 'Mouf\\Mvc\\Splash\\Routers\\ErrorRouter',
    'external' => false,
    'anonymous' => true,
    'weak' => true,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'Mouf\\Mvc\\Splash\\Routers\\ExceptionRouter',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'annotationReader' => 
  array (
    'weak' => false,
    'comment' => '',
    'class' => 'Doctrine\\Common\\Annotations\\CachedReader',
    'external' => false,
    'code' => '// Using composer autoloader
$loader = require ROOT_PATH . \'vendor/autoload.php\';
\\Doctrine\\Common\\Annotations\\AnnotationRegistry::registerLoader(array($loader, \'loadClass\'));

// Creating a new AnnotationReader
$reader = new \\Doctrine\\Common\\Annotations\\AnnotationReader();
return new \\Doctrine\\Common\\Annotations\\CachedReader($reader, $container->get("defaultDoctrineCache"));',
  ),
  'apcCacheService' => 
  array (
    'class' => 'Mouf\\Utils\\Cache\\ApcCache',
    'external' => false,
    'weak' => false,
    'fieldProperties' => 
    array (
      'defaultTimeToLive' => 
      array (
        'value' => 3600,
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      'prefix' => 
      array (
        'value' => 'SECRET',
        'type' => 'config',
        'metadata' => 
        array (
        ),
      ),
    ),
    'fieldBinds' => 
    array (
      'fallback' => 'fileCacheService',
    ),
  ),
  'block.content' => 
  array (
    'class' => 'Mouf\\Html\\HtmlElement\\HtmlBlock',
    'external' => false,
    'weak' => false,
  ),
  'block.footer' => 
  array (
    'class' => 'Mouf\\Html\\HtmlElement\\HtmlBlock',
    'external' => false,
    'weak' => false,
  ),
  'block.header' => 
  array (
    'class' => 'Mouf\\Html\\HtmlElement\\HtmlBlock',
    'external' => false,
    'weak' => false,
  ),
  'block.left' => 
  array (
    'class' => 'Mouf\\Html\\HtmlElement\\HtmlBlock',
    'external' => false,
    'weak' => false,
  ),
  'block.right' => 
  array (
    'class' => 'Mouf\\Html\\HtmlElement\\HtmlBlock',
    'external' => false,
    'weak' => false,
  ),
  'bootstrapRenderer' => 
  array (
    'class' => 'Mouf\\Html\\Renderer\\FileBasedRenderer',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'vendor/mouf/html.template.bootstrap/src/templates',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'rendererCacheService',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => 'template',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      3 => 
      array (
        'value' => 0,
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'bootstrapTemplate' => 
  array (
    'class' => 'Mouf\\Html\\Template\\BootstrapTemplate',
    'external' => false,
    'weak' => false,
    'setterBinds' => 
    array (
      'setContent' => 'block.content',
      'setLeft' => 'block.left',
      'setRight' => 'block.right',
      'setHeader' => 'block.header',
      'setFooter' => 'block.footer',
      'setWebLibraryManager' => 'defaultWebLibraryManager',
      'setTemplateRenderer' => 'bootstrapRenderer',
      'setDefaultRenderer' => 'defaultRenderer',
    ),
  ),
  'component.bootstrap' => 
  array (
    'class' => 'Mouf\\Html\\Utils\\WebLibraryManager\\WebLibrary',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 
        array (
          0 => 'vendor/components/bootstrap/js/bootstrap.js',
        ),
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 
        array (
          0 => 'vendor/components/bootstrap/css/bootstrap.min.css',
        ),
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'component.jquery' => 
  array (
    'class' => 'Mouf\\Html\\Utils\\WebLibraryManager\\WebLibrary',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 
        array (
          0 => 'vendor/components/jquery/jquery.js',
        ),
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 
        array (
        ),
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'customRenderer' => 
  array (
    'class' => 'Mouf\\Html\\Renderer\\FileBasedRenderer',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'src/templates',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'rendererCacheService',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => 'custom',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      3 => 
      array (
        'value' => 0,
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      4 => 
      array (
        'value' => 'twigEnvironment',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'defaultDoctrineCache' => 
  array (
    'weak' => false,
    'comment' => '',
    'class' => 'Doctrine\\Common\\Cache\\ArrayCache',
    'external' => false,
    'code' => '// If DEBUG mode is on, let\'s just use an ArrayCache.
if (DEBUG) {
	$driver = new \\Doctrine\\Common\\Cache\\ArrayCache();
} else {
	// If APC is available, let\'s use APC
	if (extension_loaded("apcu")) {
		$driver = new \\Doctrine\\Common\\Cache\\ApcuCache();
	} else if (extension_loaded("apc")) {
		$driver = new \\Doctrine\\Common\\Cache\\ApcCache();
	} else {
		$driver = new \\Doctrine\\Common\\Cache\\PhpFileCache(sys_get_temp_dir().\'/doctrinecache\');
	}
}
$driver->setNamespace(SECRET);
return $driver;
',
  ),
  'defaultRenderer' => 
  array (
    'class' => 'Mouf\\Html\\Renderer\\AutoChainRenderer',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'rendererCacheService',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'defaultWebLibraryManager' => 
  array (
    'class' => 'Mouf\\Html\\Utils\\WebLibraryManager\\WebLibraryManager',
    'external' => false,
    'weak' => false,
    'setterBinds' => 
    array (
      'setWebLibraries' => 
      array (
        0 => 'rootUrlInlineWebLibrary',
        1 => 'messageServiceLibrary',
        2 => 'component.jquery',
        3 => 'component.bootstrap',
      ),
    ),
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'defaultRenderer',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'doctrineMoufCache' => 
  array (
    'class' => 'Mouf\\Utils\\Common\\Doctrine\\Cache\\DoctrineCacheAdapter',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'defaultDoctrineCache',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'fileCacheService' => 
  array (
    'class' => 'Mouf\\Utils\\Cache\\FileCache',
    'external' => false,
    'weak' => false,
    'fieldProperties' => 
    array (
      'defaultTimeToLive' => 
      array (
        'value' => 3600,
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      'prefix' => 
      array (
        'value' => 'SECRET',
        'type' => 'config',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'messageServiceLibrary' => 
  array (
    'class' => 'Mouf\\Html\\Utils\\WebLibraryManager\\WebLibrary',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 
        array (
        ),
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 
        array (
          0 => 'vendor/mouf/html.widgets.messageservice/messages.css',
        ),
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'messageWidget' => 
  array (
    'class' => 'Mouf\\Html\\Widgets\\MessageService\\Widget\\MessageWidget',
    'external' => false,
    'weak' => false,
    'fieldBinds' => 
    array (
      'messageProvider' => 'userMessageService',
    ),
  ),
  'moufTwigExtension' => 
  array (
    'class' => 'Mouf\\Html\\Renderer\\Twig\\MoufTwigExtension',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'return $container;',
        'parametertype' => 'primitive',
        'type' => 'php',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'packageRenderer_mouf/html.utils.weblibrarymanager' => 
  array (
    'class' => 'Mouf\\Html\\Renderer\\FileBasedRenderer',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'vendor/mouf/html.utils.weblibrarymanager/src/templates',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'rendererCacheService',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => 'package',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      3 => 
      array (
        'value' => 0,
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      4 => 
      array (
        'value' => 'twigEnvironment',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'packageRenderer_mouf/html.widgets.menu' => 
  array (
    'class' => 'Mouf\\Html\\Renderer\\FileBasedRenderer',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'vendor/mouf/html.widgets.menu/src/templates',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'rendererCacheService',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => 'package',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      3 => 
      array (
        'value' => 0,
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      4 => 
      array (
        'value' => 'twigEnvironment',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'packageRenderer_mouf/html.widgets.messageservice' => 
  array (
    'class' => 'Mouf\\Html\\Renderer\\FileBasedRenderer',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'vendor/mouf/html.widgets.messageservice/src/templates',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'rendererCacheService',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => 'package',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      3 => 
      array (
        'value' => 0,
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      4 => 
      array (
        'value' => 'twigEnvironment',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'psr.errorLogLogger' => 
  array (
    'class' => 'Mouf\\Utils\\Log\\Psr\\ErrorLogLogger',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'warning',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'rendererCacheService' => 
  array (
    'class' => 'Mouf\\Utils\\Cache\\InMemoryCache',
    'external' => false,
    'weak' => false,
    'fieldBinds' => 
    array (
      'chainWith' => 'apcCacheService',
    ),
  ),
  'rootController' => 
  array (
    'class' => 'DemoCoder\\Controllers\\RootController',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'bootstrapTemplate',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'block.content',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      2 => 
      array (
        'value' => 'twigEnvironment',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'rootUrlInlineWebLibrary' => 
  array (
    'class' => 'Mouf\\Html\\Utils\\WebLibraryManager\\InlineWebLibrary',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'rootUrlJsFile',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'rootUrlJsFile' => 
  array (
    'class' => 'Mouf\\Html\\HtmlElement\\HtmlFromFile',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'vendor/mouf/html.utils.weblibrarymanager/javascript/rootUrl.php',
        'parametertype' => 'primitive',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'sessionManager' => 
  array (
    'class' => 'Mouf\\Utils\\Session\\SessionManager\\DefaultSessionManager',
    'external' => false,
  ),
  'splashCachePool' => 
  array (
    'weak' => false,
    'comment' => '',
    'class' => 'Stash\\Pool',
    'external' => false,
    'code' => '$drivers = [
    new Stash\\Driver\\Ephemeral()
];

if (Stash\\Driver\\Apc::isAvailable()) {
    $drivers[] = new Stash\\Driver\\Apc([
        \'namespace\' => SECRET
    ]);
}

$drivers[] = new Stash\\Driver\\FileSystem([
    \'path\' => sys_get_temp_dir().\'/splash-\'.SECRET
]);

$compositeDriver = new Stash\\Driver\\Composite([\'drivers\'=>$drivers]);

return new Stash\\Pool($compositeDriver);',
  ),
  'twigCacheFileSystem' => 
  array (
    'class' => 'Twig_Cache_Filesystem',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => '// If we are running on a Unix environment, let\'s prepend the cache with the user id of the PHP process.
// This way, we can avoid rights conflicts.
if (function_exists(\'posix_geteuid\')) {
    $posixGetuid = posix_geteuid();
} else {
    $posixGetuid = \'\';
}
return rtrim(sys_get_temp_dir(), \'/\\\\\').\'/mouftwigtemplatemain_\'.$posixGetuid.str_replace(":", "", ROOT_PATH);',
        'parametertype' => 'primitive',
        'type' => 'php',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'twigDebugExtension' => 
  array (
    'class' => 'Twig_Extension_Debug',
    'external' => false,
    'weak' => false,
  ),
  'twigEnvironment' => 
  array (
    'class' => 'Mouf\\Html\\Renderer\\Twig\\MoufTwigEnvironment',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'twigLoaderFileSystem',
        'parametertype' => 'object',
        'type' => 'string',
        'metadata' => 
        array (
        ),
      ),
      1 => 
      array (
        'value' => 'return array(\'debug\' => DEBUG, \'auto_reload\' => true);',
        'parametertype' => 'primitive',
        'type' => 'php',
        'metadata' => 
        array (
        ),
      ),
    ),
    'setterBinds' => 
    array (
      'setExtensions' => 
      array (
        0 => 'moufTwigExtension',
        1 => 'twigDebugExtension',
      ),
      'setCache' => 'twigCacheFileSystem',
    ),
  ),
  'twigLoaderFileSystem' => 
  array (
    'class' => 'Twig_Loader_Filesystem',
    'external' => false,
    'weak' => false,
    'constructor' => 
    array (
      0 => 
      array (
        'value' => 'return ROOT_PATH;',
        'parametertype' => 'primitive',
        'type' => 'php',
        'metadata' => 
        array (
        ),
      ),
    ),
  ),
  'userMessageService' => 
  array (
    'class' => 'Mouf\\Html\\Widgets\\MessageService\\Service\\SessionMessageService',
    'external' => false,
    'weak' => false,
    'fieldBinds' => 
    array (
      'sessionManager' => 'sessionManager',
    ),
  ),
  'whoopsMiddleware' => 
  array (
    'class' => 'Franzl\\Middleware\\Whoops\\ErrorMiddleware',
    'external' => false,
    'weak' => false,
  ),
));


unset($moufManager);

/**
 * This is the base class of the Manage Object User Friendly or Modular object user framework (MOUF) framework.
 * This object can be used to get the objects manage by MOUF.
 *
 */
class Mouf {
	public function getClosures() {
		return [
			'Mouf\\Mvc\\Splash\\Routers\\SplashDefaultRouter' => [
				'constructor' => [
					0 => function(ContainerInterface $container) {
						return $container;
					},
					7 => function(ContainerInterface $container) {
						return ROOT_URL;
					},
				],
			],
			'Mouf\\Mvc\\Splash\\Services\\ControllerAnalyzer' => [
				'constructor' => [
					0 => function(ContainerInterface $container) {
						return $container;
					},
				],
			],
			'__anonymous__b33b_18805' => [
				'constructor' => [
					0 => function(ContainerInterface $container) {
						return $container->get('whoopsMiddleware');
					},
				],
			],
			'__anonymous__b33b_3838' => [
				'constructor' => [
					0 => function(ContainerInterface $container) {
						return $container->get('Psr7Middlewares\\Middleware\\Payload');
					},
				],
			],
			'annotationReader' => function(ContainerInterface $container) {
				// Using composer autoloader
$loader = require ROOT_PATH . 'vendor/autoload.php';
\Doctrine\Common\Annotations\AnnotationRegistry::registerLoader(array($loader, 'loadClass'));

// Creating a new AnnotationReader
$reader = new \Doctrine\Common\Annotations\AnnotationReader();
return new \Doctrine\Common\Annotations\CachedReader($reader, $container->get("defaultDoctrineCache"));
			},
			'defaultDoctrineCache' => function(ContainerInterface $container) {
				// If DEBUG mode is on, let's just use an ArrayCache.
if (DEBUG) {
	$driver = new \Doctrine\Common\Cache\ArrayCache();
} else {
	// If APC is available, let's use APC
	if (extension_loaded("apcu")) {
		$driver = new \Doctrine\Common\Cache\ApcuCache();
	} else if (extension_loaded("apc")) {
		$driver = new \Doctrine\Common\Cache\ApcCache();
	} else {
		$driver = new \Doctrine\Common\Cache\PhpFileCache(sys_get_temp_dir().'/doctrinecache');
	}
}
$driver->setNamespace(SECRET);
return $driver;

			},
			'moufTwigExtension' => [
				'constructor' => [
					0 => function(ContainerInterface $container) {
						return $container;
					},
				],
			],
			'splashCachePool' => function(ContainerInterface $container) {
				$drivers = [
    new Stash\Driver\Ephemeral()
];

if (Stash\Driver\Apc::isAvailable()) {
    $drivers[] = new Stash\Driver\Apc([
        'namespace' => SECRET
    ]);
}

$drivers[] = new Stash\Driver\FileSystem([
    'path' => sys_get_temp_dir().'/splash-'.SECRET
]);

$compositeDriver = new Stash\Driver\Composite(['drivers'=>$drivers]);

return new Stash\Pool($compositeDriver);
			},
			'twigCacheFileSystem' => [
				'constructor' => [
					0 => function(ContainerInterface $container) {
						// If we are running on a Unix environment, let's prepend the cache with the user id of the PHP process.
// This way, we can avoid rights conflicts.
if (function_exists('posix_geteuid')) {
    $posixGetuid = posix_geteuid();
} else {
    $posixGetuid = '';
}
return rtrim(sys_get_temp_dir(), '/\\').'/mouftwigtemplatemain_'.$posixGetuid.str_replace(":", "", ROOT_PATH);
					},
				],
			],
			'twigEnvironment' => [
				'constructor' => [
					1 => function(ContainerInterface $container) {
						return array('debug' => DEBUG, 'auto_reload' => true);
					},
				],
			],
			'twigLoaderFileSystem' => [
				'constructor' => [
					0 => function(ContainerInterface $container) {
						return ROOT_PATH;
					},
				],
			],
		];
	}
	/**
	 * @return Doctrine\Common\Annotations\CachedReader
	 */
	 public static function getAnnotationReader() {
	 	return MoufManager::getMoufManager()->get('annotationReader');
	 }

	/**
	 * @return Mouf\Utils\Cache\ApcCache
	 */
	 public static function getApcCacheService() {
	 	return MoufManager::getMoufManager()->get('apcCacheService');
	 }

	/**
	 * @return Mouf\Html\HtmlElement\HtmlBlock
	 */
	 public static function getBlock_content() {
	 	return MoufManager::getMoufManager()->get('block.content');
	 }

	/**
	 * @return Mouf\Html\HtmlElement\HtmlBlock
	 */
	 public static function getBlock_footer() {
	 	return MoufManager::getMoufManager()->get('block.footer');
	 }

	/**
	 * @return Mouf\Html\HtmlElement\HtmlBlock
	 */
	 public static function getBlock_header() {
	 	return MoufManager::getMoufManager()->get('block.header');
	 }

	/**
	 * @return Mouf\Html\HtmlElement\HtmlBlock
	 */
	 public static function getBlock_left() {
	 	return MoufManager::getMoufManager()->get('block.left');
	 }

	/**
	 * @return Mouf\Html\HtmlElement\HtmlBlock
	 */
	 public static function getBlock_right() {
	 	return MoufManager::getMoufManager()->get('block.right');
	 }

	/**
	 * @return Mouf\Html\Renderer\FileBasedRenderer
	 */
	 public static function getBootstrapRenderer() {
	 	return MoufManager::getMoufManager()->get('bootstrapRenderer');
	 }

	/**
	 * @return Mouf\Html\Template\BootstrapTemplate
	 */
	 public static function getBootstrapTemplate() {
	 	return MoufManager::getMoufManager()->get('bootstrapTemplate');
	 }

	/**
	 * @return Mouf\Html\Utils\WebLibraryManager\WebLibrary
	 */
	 public static function getComponent_bootstrap() {
	 	return MoufManager::getMoufManager()->get('component.bootstrap');
	 }

	/**
	 * @return Mouf\Html\Utils\WebLibraryManager\WebLibrary
	 */
	 public static function getComponent_jquery() {
	 	return MoufManager::getMoufManager()->get('component.jquery');
	 }

	/**
	 * @return Mouf\Html\Renderer\FileBasedRenderer
	 */
	 public static function getCustomRenderer() {
	 	return MoufManager::getMoufManager()->get('customRenderer');
	 }

	/**
	 * @return Doctrine\Common\Cache\ArrayCache
	 */
	 public static function getDefaultDoctrineCache() {
	 	return MoufManager::getMoufManager()->get('defaultDoctrineCache');
	 }

	/**
	 * @return Mouf\Html\Renderer\AutoChainRenderer
	 */
	 public static function getDefaultRenderer() {
	 	return MoufManager::getMoufManager()->get('defaultRenderer');
	 }

	/**
	 * @return Mouf\Html\Utils\WebLibraryManager\WebLibraryManager
	 */
	 public static function getDefaultWebLibraryManager() {
	 	return MoufManager::getMoufManager()->get('defaultWebLibraryManager');
	 }

	/**
	 * @return Mouf\Utils\Common\Doctrine\Cache\DoctrineCacheAdapter
	 */
	 public static function getDoctrineMoufCache() {
	 	return MoufManager::getMoufManager()->get('doctrineMoufCache');
	 }

	/**
	 * @return Mouf\Utils\Cache\FileCache
	 */
	 public static function getFileCacheService() {
	 	return MoufManager::getMoufManager()->get('fileCacheService');
	 }

	/**
	 * @return Mouf\Html\Utils\WebLibraryManager\WebLibrary
	 */
	 public static function getMessageServiceLibrary() {
	 	return MoufManager::getMoufManager()->get('messageServiceLibrary');
	 }

	/**
	 * @return Mouf\Html\Widgets\MessageService\Widget\MessageWidget
	 */
	 public static function getMessageWidget() {
	 	return MoufManager::getMoufManager()->get('messageWidget');
	 }

	/**
	 * @return Mouf\Html\Renderer\Twig\MoufTwigExtension
	 */
	 public static function getMoufTwigExtension() {
	 	return MoufManager::getMoufManager()->get('moufTwigExtension');
	 }

	/**
	 * @return Mouf\Html\Renderer\FileBasedRenderer
	 */
	 public static function getPackageRenderer_moufhtml_utils_weblibrarymanager() {
	 	return MoufManager::getMoufManager()->get('packageRenderer_mouf/html.utils.weblibrarymanager');
	 }

	/**
	 * @return Mouf\Html\Renderer\FileBasedRenderer
	 */
	 public static function getPackageRenderer_moufhtml_widgets_menu() {
	 	return MoufManager::getMoufManager()->get('packageRenderer_mouf/html.widgets.menu');
	 }

	/**
	 * @return Mouf\Html\Renderer\FileBasedRenderer
	 */
	 public static function getPackageRenderer_moufhtml_widgets_messageservice() {
	 	return MoufManager::getMoufManager()->get('packageRenderer_mouf/html.widgets.messageservice');
	 }

	/**
	 * @return Mouf\Utils\Log\Psr\ErrorLogLogger
	 */
	 public static function getPsr_errorLogLogger() {
	 	return MoufManager::getMoufManager()->get('psr.errorLogLogger');
	 }

	/**
	 * @return Mouf\Utils\Cache\InMemoryCache
	 */
	 public static function getRendererCacheService() {
	 	return MoufManager::getMoufManager()->get('rendererCacheService');
	 }

	/**
	 * @return Mouf\Html\Utils\WebLibraryManager\InlineWebLibrary
	 */
	 public static function getRootUrlInlineWebLibrary() {
	 	return MoufManager::getMoufManager()->get('rootUrlInlineWebLibrary');
	 }

	/**
	 * @return Mouf\Html\HtmlElement\HtmlFromFile
	 */
	 public static function getRootUrlJsFile() {
	 	return MoufManager::getMoufManager()->get('rootUrlJsFile');
	 }

	/**
	 * @return Mouf\Utils\Session\SessionManager\DefaultSessionManager
	 */
	 public static function getSessionManager() {
	 	return MoufManager::getMoufManager()->get('sessionManager');
	 }

	/**
	 * @return Twig_Cache_Filesystem
	 */
	 public static function getTwigCacheFileSystem() {
	 	return MoufManager::getMoufManager()->get('twigCacheFileSystem');
	 }

	/**
	 * @return Twig_Extension_Debug
	 */
	 public static function getTwigDebugExtension() {
	 	return MoufManager::getMoufManager()->get('twigDebugExtension');
	 }

	/**
	 * @return Mouf\Html\Renderer\Twig\MoufTwigEnvironment
	 */
	 public static function getTwigEnvironment() {
	 	return MoufManager::getMoufManager()->get('twigEnvironment');
	 }

	/**
	 * @return Twig_Loader_Filesystem
	 */
	 public static function getTwigLoaderFileSystem() {
	 	return MoufManager::getMoufManager()->get('twigLoaderFileSystem');
	 }

	/**
	 * @return Mouf\Html\Widgets\MessageService\Service\SessionMessageService
	 */
	 public static function getUserMessageService() {
	 	return MoufManager::getMoufManager()->get('userMessageService');
	 }

	/**
	 * @return Franzl\Middleware\Whoops\ErrorMiddleware
	 */
	 public static function getWhoopsMiddleware() {
	 	return MoufManager::getMoufManager()->get('whoopsMiddleware');
	 }

	/**
	 * @return Mouf\Mvc\Splash\SplashMiddleware
	 */
	 public static function getMoufMvcSplashSplashMiddleware() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\SplashMiddleware');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Controllers\HttpErrorsController
	 */
	 public static function getMoufMvcSplashControllersHttpErrorsController() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Controllers\\HttpErrorsController');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Routers\NotFoundRouter
	 */
	 public static function getMoufMvcSplashRoutersNotFoundRouter() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Routers\\NotFoundRouter');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Routers\ExceptionRouter
	 */
	 public static function getMoufMvcSplashRoutersExceptionRouter() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Routers\\ExceptionRouter');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Routers\PhpVarsCheckRouter
	 */
	 public static function getMoufMvcSplashRoutersPhpVarsCheckRouter() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Routers\\PhpVarsCheckRouter');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Routers\SplashDefaultRouter
	 */
	 public static function getMoufMvcSplashRoutersSplashDefaultRouter() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Routers\\SplashDefaultRouter');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Services\ParameterFetcherRegistry
	 */
	 public static function getMoufMvcSplashServicesParameterFetcherRegistry() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Services\\ParameterFetcherRegistry');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Services\SplashRequestFetcher
	 */
	 public static function getMoufMvcSplashServicesSplashRequestFetcher() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Services\\SplashRequestFetcher');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Services\MoufExplorerUrlProvider
	 */
	 public static function getMoufMvcSplashServicesMoufExplorerUrlProvider() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Services\\MoufExplorerUrlProvider');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Services\ControllerRegistry
	 */
	 public static function getMoufMvcSplashServicesControllerRegistry() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Services\\ControllerRegistry');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Services\SplashRequestParameterFetcher
	 */
	 public static function getMoufMvcSplashServicesSplashRequestParameterFetcher() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Services\\SplashRequestParameterFetcher');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Services\ControllerAnalyzer
	 */
	 public static function getMoufMvcSplashServicesControllerAnalyzer() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Services\\ControllerAnalyzer');
	 }

	/**
	 * @return Mouf\Mvc\Splash\Services\MoufControllerExplorer
	 */
	 public static function getMoufMvcSplashServicesMoufControllerExplorer() {
	 	return MoufManager::getMoufManager()->get('Mouf\\Mvc\\Splash\\Services\\MoufControllerExplorer');
	 }

	/**
	 * @return Psr7Middlewares\Middleware\Payload
	 */
	 public static function getPsr7MiddlewaresMiddlewarePayload() {
	 	return MoufManager::getMoufManager()->get('Psr7Middlewares\\Middleware\\Payload');
	 }

	/**
	 * @return Stash\Pool
	 */
	 public static function getSplashCachePool() {
	 	return MoufManager::getMoufManager()->get('splashCachePool');
	 }

	/**
	 * @return DemoCoder\Controllers\RootController
	 */
	 public static function getRootController() {
	 	return MoufManager::getMoufManager()->get('rootController');
	 }

}
